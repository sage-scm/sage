#!/usr/bin/env bash
set -euo pipefail

YELLOW='\033[1;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Running pre-commit hooks...${NC}"

# Check if we're in a rebase
if [[ -d ".git/rebase-merge" || -d ".git/rebase-apply" ]]; then
    echo "Skipping hooks during rebase"
    exit 0
fi

# 1. Format code
echo -e "${YELLOW}📝 Formatting code...${NC}"
if cargo fmt --all --check 2>/dev/null; then
    echo -e "${GREEN}✓ Code is already formatted${NC}"
else
    cargo fmt --all
    echo -e "${GREEN}✓ Code has been formatted${NC}"
    # Re-add formatted files
    git add -u
fi

# 2. Run clippy with auto-fix for staged files
echo -e "${YELLOW}🔍 Running clippy...${NC}"

# First try to auto-fix issues
cargo clippy --all-targets --all-features --fix --allow-dirty --allow-staged 2>/dev/null
CLIPPY_EXIT=$?

if [ $CLIPPY_EXIT -eq 0 ]; then
    echo -e "${GREEN}✓ Clippy checks passed${NC}"
    # Re-add any auto-fixed files
    git add -u
else
    # Run clippy again to show remaining issues that couldn't be auto-fixed
    echo -e "${RED}✗ Some clippy issues couldn't be auto-fixed:${NC}"
    cargo clippy --all-targets --all-features -- -D warnings
    echo -e "${RED}Please fix the above issues manually and try again.${NC}"
    exit 1
fi

# 3. Check for TODO/FIXME in staged files (optional warning)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(rs|toml)$' || true)
if [ -n "$STAGED_FILES" ]; then
    TODO_COUNT=$(echo "$STAGED_FILES" | xargs grep -E "(TODO|FIXME|XXX|HACK)" 2>/dev/null | wc -l || echo 0)
    if [ "$TODO_COUNT" -gt 0 ]; then
        echo -e "${YELLOW}⚠️  Found $TODO_COUNT TODO/FIXME comments in staged files${NC}"
        echo "$STAGED_FILES" | xargs grep -E "(TODO|FIXME|XXX|HACK)" --color=always || true
        echo -e "${YELLOW}Consider addressing these before committing${NC}"
        # Don't block, just warn
    fi
fi

# 4. Ensure Cargo.lock is up to date if Cargo.toml changed
if git diff --cached --name-only | grep -q "Cargo.toml"; then
    echo -e "${YELLOW}📦 Updating Cargo.lock...${NC}"
    cargo update --workspace --dry-run > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "${RED}✗ Cargo.toml has issues${NC}"
        exit 1
    fi
    # Generate fresh Cargo.lock if needed
    cargo generate-lockfile
    git add Cargo.lock
    echo -e "${GREEN}✓ Cargo.lock is up to date${NC}"
fi

echo -e "${GREEN}✅ Pre-commit checks passed!${NC}"
