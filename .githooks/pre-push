#!/usr/bin/env bash
set -euo pipefail

YELLOW='\033[1;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}═══════════════════════════════════════════${NC}"
echo -e "${BLUE}     Running pre-push verification...      ${NC}"
echo -e "${BLUE}═══════════════════════════════════════════${NC}"

# Parse remote and branch info
remote="${1:-}"
url="${2:-}"

# Check if pushing to main/master branch
protected_branches="main master"
current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

for branch in $protected_branches; do
    if [ "$current_branch" = "$branch" ]; then
        echo -e "${YELLOW}⚠️  Pushing to protected branch '$branch'${NC}"
        read -p "Are you sure you want to push to $branch? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${RED}Push cancelled${NC}"
            exit 1
        fi
    fi
done

# 1. Run formatting check
echo -e "${YELLOW}📝 Checking code formatting...${NC}"
if cargo fmt --all -- --check; then
    echo -e "${GREEN}✓ Code formatting is correct${NC}"
else
    echo -e "${RED}✗ Code needs formatting. Run 'cargo fmt --all'${NC}"
    exit 1
fi

# 2. Run clippy with strict checks
echo -e "${YELLOW}🔍 Running clippy checks...${NC}"
if cargo clippy --all-targets --all-features -- -D warnings; then
    echo -e "${GREEN}✓ Clippy checks passed${NC}"
else
    echo -e "${RED}✗ Clippy found issues${NC}"
    exit 1
fi

# 3. Build the project
echo -e "${YELLOW}🔨 Building project...${NC}"
if cargo build --all-features; then
    echo -e "${GREEN}✓ Build successful${NC}"
else
    echo -e "${RED}✗ Build failed${NC}"
    exit 1
fi

# 4. Run tests
echo -e "${YELLOW}🧪 Running tests...${NC}"
# Use nextest if available for faster test runs
if command -v cargo-nextest &> /dev/null; then
    if cargo nextest run --workspace --all-features; then
        echo -e "${GREEN}✓ All tests passed${NC}"
    else
        echo -e "${RED}✗ Tests failed${NC}"
        exit 1
    fi
else
    if cargo test --workspace --all-features; then
        echo -e "${GREEN}✓ All tests passed${NC}"
    else
        echo -e "${RED}✗ Tests failed${NC}"
        exit 1
    fi
fi

# 5. Check for workspace-hack consistency (if using hakari)
if [ -f ".config/hakari.toml" ]; then
    echo -e "${YELLOW}📦 Checking workspace-hack...${NC}"
    if command -v cargo-hakari &> /dev/null; then
        if cargo hakari generate --diff; then
            echo -e "${GREEN}✓ workspace-hack is up to date${NC}"
        else
            echo -e "${RED}✗ workspace-hack needs updating. Run 'cargo hakari generate'${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}⚠️  cargo-hakari not installed, skipping workspace-hack check${NC}"
    fi
fi

# 6. Check documentation builds
echo -e "${YELLOW}📚 Building documentation...${NC}"
if cargo doc --no-deps --all-features 2>/dev/null; then
    echo -e "${GREEN}✓ Documentation builds successfully${NC}"
else
    echo -e "${YELLOW}⚠️  Documentation build has warnings${NC}"
    # Don't fail on doc warnings, just notify
fi

# 7. Security audit (if cargo-audit is installed)
if command -v cargo-audit &> /dev/null; then
    echo -e "${YELLOW}🔒 Running security audit...${NC}"
    if cargo audit; then
        echo -e "${GREEN}✓ No security vulnerabilities found${NC}"
    else
        echo -e "${YELLOW}⚠️  Security vulnerabilities detected (non-blocking)${NC}"
        # Don't block on security issues, just warn
    fi
else
    echo -e "${YELLOW}ℹ️  Install cargo-audit for security checks: cargo install cargo-audit${NC}"
fi

echo -e "${BLUE}═══════════════════════════════════════════${NC}"
echo -e "${GREEN}✅ All pre-push checks passed!${NC}"
echo -e "${BLUE}═══════════════════════════════════════════${NC}"
