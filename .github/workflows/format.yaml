# This workflow automatically formats Rust code using rustfmt
# It runs daily and on pull requests to main, and can be manually triggered
# It commits and pushes changes using a service account
#
# Required secrets:
# - SERVICE_ACCOUNT_TOKEN: A personal access token with repo scope for the service account
#
name: format
on:
  # Run on schedule - once a day at midnight
  schedule:
    - cron: '0 0 * * *'
  # Run on pull requests to main
  pull_request:
    branches:
      - main
  # Allow manual triggering
  workflow_dispatch:

jobs:
  format:
    name: Format Code
    runs-on: blacksmith-2vcpu-ubuntu-2404-arm
    # Use a GitHub token with write permissions
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SERVICE_ACCOUNT_TOKEN }}
          fetch-depth: 0  # Fetch all history for proper commits

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@1.87
        with:
          components: rustfmt, clippy

      - name: Install just
        uses: taiki-e/install-action@just

      - name: Set up Git
        run: |
          # Configure Git to use the service account identity
          git config --global user.name "Sage Format Bot"
          git config --global user.email "sage-format-bot@users.noreply.github.com"

      # Install cargo dependencies
      - name: Install dependencies
        run: |
          rustc --version
          cargo --version
          cargo fmt --version
          just --version

      # Run cargo fmt with verbose output for debugging
      - name: Run cargo fmt
        run: |
          # Use justfile fmt command which handles all formatting
          just fmt

      - name: Check for changes
        id: git-check
        run: |
          # Make sure we're looking at all changes
          git status

          # Check for any changes to tracked files
          if git diff --exit-code; then
            echo "No changes to tracked files"

            # Also check for untracked files that might need to be added
            if [ -z "$(git ls-files --others --exclude-standard)" ]; then
              echo "No untracked files found"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            else
              echo "Untracked files found"
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Untracked files:"
              git ls-files --others --exclude-standard
            fi
          else
            echo "Changes to tracked files detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Files changed:"
            git diff --name-only
          fi

      - name: Commit changes
        if: steps.git-check.outputs.has_changes == 'true'
        run: |
          git add -A
          git commit -m "style(format): apply rustfmt code formatting [skip ci]"
          echo "Changes committed"

      - name: Push changes
        if: steps.git-check.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.SERVICE_ACCOUNT_TOKEN }}
        run: |
          # Print debug info (without exposing the token)
          echo "GitHub Actor: ${GITHUB_ACTOR}"
          echo "GitHub Repository: ${GITHUB_REPOSITORY}"
          echo "GitHub Ref: ${GITHUB_REF}"

          # Set the remote URL with authentication
          # Using the token directly in the URL
          remote_repo="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "${remote_repo}"

          # Get current branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Current branch: ${BRANCH_NAME}"

          # Push the changes
          echo "Pushing changes to ${BRANCH_NAME}..."
          git push origin HEAD:${BRANCH_NAME} && echo "Changes pushed successfully" || echo "Failed to push changes"
