name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  prepare:
    name: Prepare Release
    runs-on: blacksmith-2vcpu-ubuntu-2404-arm
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install just
        uses: taiki-e/install-action@just
        
      - name: Run pre-release checks
        run: just pre-release

  build:
    name: Build Release
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux targets
          - os: blacksmith-4vcpu-ubuntu-2404
            target: x86_64-unknown-linux-gnu
            asset_name: sg-linux-amd64
            use_cross: true
          - os: blacksmith-4vcpu-ubuntu-2404
            target: x86_64-unknown-linux-musl
            asset_name: sg-linux-amd64-musl
            use_cross: true
          - os: blacksmith-4vcpu-ubuntu-2404
            target: aarch64-unknown-linux-gnu
            asset_name: sg-linux-arm64
            use_cross: true
          - os: blacksmith-4vcpu-ubuntu-2404
            target: aarch64-unknown-linux-musl
            asset_name: sg-linux-arm64-musl
            use_cross: true
          # macOS targets (do not use cross)
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: sg-macos-amd64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: sg-macos-arm64
            use_cross: false
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: sg-windows-amd64
            use_cross: true
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            asset_name: sg-windows-arm64
            use_cross: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install just
        uses: taiki-e/install-action@just
        
      - name: Install cross (for cross-compilation)
        if: matrix.use_cross
        shell: bash
        run: cargo install cross --git https://github.com/cross-rs/cross
        
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build release
        shell: bash
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --bin sg
          else
            cargo build --release --target ${{ matrix.target }} --bin sg
          fi
          
      - name: Package binary and generate checksums
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          
          # Determine binary extension
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY_NAME="sg.exe"
            ARCHIVE_NAME="${{ matrix.asset_name }}.zip"
            # Create zip for Windows
            zip "$ARCHIVE_NAME" "$BINARY_NAME"
          else
            BINARY_NAME="sg"
            ARCHIVE_NAME="${{ matrix.asset_name }}.tar.gz"
            # Create tar.gz for Unix-like systems
            tar czf "$ARCHIVE_NAME" "$BINARY_NAME"
          fi
          
          # Generate SHA256 checksum
          if [[ "${{ matrix.target }}" == *"windows"* ]] && command -v powershell >/dev/null 2>&1; then
            # Use PowerShell on Windows (Git Bash has PowerShell available)
            powershell -Command "(Get-FileHash -Algorithm SHA256 '$ARCHIVE_NAME').Hash.ToLower() + '  ' + '$ARCHIVE_NAME'" > "$ARCHIVE_NAME.sha256"
          elif command -v sha256sum >/dev/null 2>&1; then
            sha256sum "$ARCHIVE_NAME" > "$ARCHIVE_NAME.sha256"
          elif command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "$ARCHIVE_NAME" > "$ARCHIVE_NAME.sha256"
          else
            echo "Warning: No SHA256 utility found"
          fi
          
          # Move files to root (portable path)
          mv "$ARCHIVE_NAME"* "${{ github.workspace }}/"
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.*

